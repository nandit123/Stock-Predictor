# -*- coding: utf-8 -*-
"""stock-predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17jtc1y52W-i3rBeye23XrVLgM2Yhy0b-
"""

# Facebook stock prediction
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

from google.colab import files
uploaded = files.upload()

msftdata = pd.read_csv('MSFT.csv', parse_dates=True)
msftdata

msftdata.columns

msftdata.describe()

msftdata.head()

df = pd.DataFrame(msftdata, columns=['Date','Open','High','Low','Close', 'Adj Close', 'Volume'])
df.head()

df.plot(x='Date', y='Close', title='Microsoft Stock Prices', figsize=(15,15))

dfreg = df.loc[:,['Adj Close','Volume']]
dfreg['L_PCT'] = (df['High'] - df['Low']) / df['Close'] * 100.0
dfreg['PCT_change'] = (df['Close'] - df['Open']) / df['Open'] * 100.0
dfreg

dfreg.fillna(value=-99999, inplace=True)

X = np.array(dfreg.drop(columns=['Adj Close']))
y = np.array(dfreg['Adj Close'])
X = preprocessing.scale(X)
dates = np.array(df['Date'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01)
dates_train, dates_test = dates[:248],dates[248:]
X_train.shape, X_test.shape, y_train.shape, y_test.shape, dates_train.shape, dates_test.shape

LinearRegressionModel = linear_model.LinearRegression()
RidgeRegressionModel = linear_model.Ridge()
LassoRegressionModel = linear_model.Lasso()
ElasticNetModel = linear_model.ElasticNet()
LarsModel = linear_model.Lars()
model_names = ['Linear Regression','Ridge Regression','Lasso Regression', 'Elastic Net','Lars Model']
models = [LinearRegressionModel, RidgeRegressionModel, LassoRegressionModel, ElasticNetModel, LarsModel]
LinearRegressionModel.fit(X_train, y_train)
RidgeRegressionModel.fit(X_train, y_train)
LassoRegressionModel.fit(X_train, y_train)
ElasticNetModel.fit(X_train, y_train)
LarsModel.fit(X_train, y_train)


#Drawing Hypothesis over the Training data

plt.subplots_adjust(hspace=0.9)
f = plt.figure(figsize=(25,25))

sp1 = plt.subplot(5,1,1)
plt.title('Linear Regression Model')
sp1.scatter(dates_train, y_train, color='r', label='Datapoints')
plt.ylabel('Adj Close Price')
plt.xlabel('Dates')
plt.xticks(np.arange(0, len(dates_train), step=30))
sp1.plot(dates_train, LinearRegressionModel.predict(X_train), label='Hypothesis/Predicted data')

plt.subplot(5,1,2)
plt.title('Ridge Regression Model')
plt.scatter(dates_train, y_train, color='r', label='Datapoints')
plt.ylabel('Adj Close Price')
plt.xlabel('Dates')
plt.xticks(np.arange(0, len(dates_train), step=30))
plt.plot(dates_train, RidgeRegressionModel.predict(X_train), label='Hypothesis/Predicted data')

plt.subplot(5,1,3)
plt.title('Lasso Regression Model')
plt.scatter(dates_train, y_train, color='r', label='Datapoints')
plt.ylabel('Adj Close Price')
plt.xlabel('Dates')
plt.xticks(np.arange(0, len(dates_train), step=30))
plt.plot(dates_train, LassoRegressionModel.predict(X_train), label='Hypothesis/Predicted data')

plt.subplot(5,1,4)
plt.title('Elastic Net Model')
plt.scatter(dates_train, y_train, color='r', label='Datapoints')
plt.ylabel('Adj Close Price')
plt.xlabel('Dates')
plt.xticks(np.arange(0, len(dates_train), step=30))
plt.plot(dates_train, ElasticNetModel.predict(X_train), label='Hypothesis/Predicted data')

plt.subplot(5,1,5)
plt.title('LARS Model')
plt.scatter(dates_train, y_train, color='r', label='Datapoints')
plt.ylabel('Adj Close Price')
plt.xlabel('Dates')
plt.xticks(np.arange(0, len(dates_train), step=30))
plt.plot(dates_train, LarsModel.predict(X_train), label='Hypothesis/Predicted data')

plt.show()

#Comparing actual values to the predicted values
LinRegDataFrame = pd.DataFrame()
LinRegDataFrame['Date'] = dates_test
LinRegDataFrame['Actual Value'] = y_test
LinRegDataFrame['Predicted Value'] = LinearRegressionModel.predict(X_test)

RidgeRegDataFrame = pd.DataFrame()
RidgeRegDataFrame['Date'] = dates_test
RidgeRegDataFrame['Actual Value'] = y_test
RidgeRegDataFrame['Predicted Value'] = RidgeRegressionModel.predict(X_test)

LassoRegDataFrame = pd.DataFrame()
LassoRegDataFrame['Date'] = dates_test
LassoRegDataFrame['Actual Value'] = y_test
LassoRegDataFrame['Predicted Value'] = LinearRegressionModel.predict(X_test)

ElasticNetRegDataFrame = pd.DataFrame()
ElasticNetRegDataFrame['Date'] = dates_test
ElasticNetRegDataFrame['Actual Value'] = y_test
ElasticNetRegDataFrame['Predicted Value'] = LinearRegressionModel.predict(X_test)

LarsRegDataFrame = pd.DataFrame()
LarsRegDataFrame['Date'] = dates_test
LarsRegDataFrame['Actual Value'] = y_test
LarsRegDataFrame['Predicted Value'] = LinearRegressionModel.predict(X_test)


f = plt.figure(figsize=(25,25))
plt.subplots_adjust(hspace=0.7)
sp1 = f.add_subplot(511, title='Linear Regression')
LinRegDataFrame.plot(x='Date', y=['Actual Value', 'Predicted Value'], kind='bar', ax=sp1)

sp2 = f.add_subplot(512, title='Ridge Regression')
RidgeRegDataFrame.plot(x='Date', y=['Actual Value', 'Predicted Value'], kind='bar', ax=sp2)

sp3 = f.add_subplot(513, title='Lasso Regression')
LassoRegDataFrame.plot(x='Date', y=['Actual Value', 'Predicted Value'], kind='bar', ax=sp3)

sp4 = f.add_subplot(514, title='Elastic Net Regression')
ElasticNetRegDataFrame.plot(x='Date', y=['Actual Value', 'Predicted Value'], kind='bar', ax=sp4)

sp5 = f.add_subplot(515, title='LARS')
LarsRegDataFrame.plot(x='Date', y=['Actual Value', 'Predicted Value'], kind='bar', ax=sp5)

plt.show()

scores = []
for i in range(5):
    scores.append(models[i].score(X_train, y_train))
    
scoresDataFrame = pd.DataFrame()
scoresDataFrame['Name'] = model_names
scoresDataFrame['Score'] = scores
scoresDataFrame

scoresDataFrame.plot(x='Name', y='Score', kind='bar')